---

#is_https and vault_port come from dependent role
- name: Setting the Vault URL
  set_fact:
    vault_url: "{{ is_https | ternary('https', 'http') }}://{{ inventory_hostname }}:{{ vault_port }}"

- name: Check if JWT auth backend needs created
  community.hashi_vault.vault_read:
    url: "{{ vault_url }}"
    path: sys/auth
    token: "{{ vault_token }}"
    token_validate: false
    validate_certs: false
  register: auth_list_result

- block:
  - name: Create JWT backend that will be used by TF
    community.hashi_vault.vault_write:
      url: "{{ vault_url }}"
      path: sys/auth/tfc
      data:
        type: jwt
        oidc_discovery_url: "https://app.terraform.io"
        bound_issuer: "https://app.terraform.io"
      token: "{{ vault_token }}"
      validate_certs: false
      token_validate: false

  - name: Create the Vault policy for TF
    community.hashi_vault.vault_write:
      url: "{{ vault_url }}"
      path: sys/policy/tf-policy
      data:
        policy: "path \"*\" {capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]}"
      token: "{{ vault_token }}"
      validate_certs: false
      token_validate: false

  - name: Create the JWT role with the required policies for TF
    community.hashi_vault.vault_write:
      url: "{{ vault_url }}"
      path: auth/tfc/role/terraform
      data:
        policies: "tf-policy"
        token_max_ttl: "100"
        user_claim: "aud"
        role_type: "jwt"
        bound_audiences: "[\"tfc\"]"
        bound_claims_type: "glob"
        bound_claims: "{{ tf_bound_claims }}" #set in group_vars/all
      token: "{{ vault_token }}"
      validate_certs: false
      token_validate: false

  when:
    - "not 'tfc/' in (auth_list_result | string)"